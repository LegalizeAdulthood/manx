#!/usr/bin/perl -w
use strict;

use CGI qw/:cgi -no_xhtml/;
use DBI;
use CGI::Carp qw(fatalsToBrowser);
use POSIX qw();
use Manx::DB;
use Manx::Utilities;

#use encoding 'utf8';
binmode STDOUT, ":utf8";

sub html_encode($);
sub sessionid();

my ($dbh, $smt, $sth, $rc, $rv, @rowary);

$dbh = connectdb();
die $DBI::errstr if $DBI::err;

my ($cookie, $session, $user_id, $logifail, $cookiefail);

if (defined(param('LOGO'))) {
	$cookie = cookie(-name => 'manxSession', -value => 'OUT', -expires => '+1s', -path => '/manx');
	if (defined(param('redirect'))) {
		print header(-status => '303 See Also', -location => param('redirect'),
			-type => 'text/plain', -charset => 'utf-8');
	}
	# else display login screen
}

$logifail = 0;
if (defined(param('LOGI'))) {
	@rowary = $dbh->selectrow_array('select id from USER where active and username=? and password=?', undef, param('user'), param('pass'));
	if (@rowary) {
		# correct username and password
		# generate session id and go to correct place
		$session = sessionid();
		$user_id = $rowary[0];
		$cookie = cookie(-name => 'manxSession', -value => $session, -path => '/manx');

	} else {
		$logifail = 1;
	}

	if (!$logifail) {
		$dbh->do('insert into SESSION (id,user,address,user_agent) values (?,?,?,?)', undef, $session, $user_id, remote_host(), http('user-agent'));
		# Now take our cookie and redirect back to this script to test
		Delete('LOGI', 'user', 'pass');
		param('check', 1);
		print header(-status => '303 See Also', -location => url(-full => 1, -query => 1),
			-type => 'text/plain', -charset => 'utf-8', -cookie => $cookie);
		print "Going round again...";
		print url(-full => 1, -query => 1), "\n";
		$dbh->disconnect;
		exit;
	}
}

if (defined(param('check'))) {
	if (cookie('manxSession') && cookie('manxSession') ne 'OUT') {
		my $redirloc = 'http://manx/manx/search';
		$redirloc = param('redirect') if defined(param('redirect'));
		print header(-status => '303 See Also', -location => $redirloc,
			-type => 'text/plain', -charset => 'utf-8');
		print "found cookie ", cookie('manxSession'), "\n";
		exit;
	} else {
		$cookiefail = 1;
	}
}

param('user', '');

print header(-type => 'text/html', '-charset' => 'utf-8', -cookie => $cookie);

print '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">',
	qq{<html lang="en"><head><title>Manx</title>\n},
	qq{<link rel="stylesheet" href="manx-style.css" type="text/css">\n},
	qq{</head>\n<body>\n};

print qq{<body id="VT100-NET">\n};
print qq{<div id="AUTH">Guest | <a href="/manx/login">Login</a></div>};
print qq{<div id="LOGO"><h1><span>Manx &ndash; a catalogue of online computer manuals</span></h1></div>};

# Menu
	print qq{<div id="MENU"><A CLASS="first" href="/manx/search">Search</a><span class="nodisp"> | </span><a href="/manx/about">About</A><SPAN CLASS="nodisp"> | </SPAN><A HREF="/manx/help">Help</A></DIV>\n};

print '<div class="det">';

print qq{<form id="LOGINFORM" method="post" action="}, url(), qq{">\n};
print qq{<table id="LOGINBOX">\n<tbody>\n};
print qq{<tr><td><label for="USERFIELD">Username:</label></td>\n};
print qq{<td><input type="text" id="USERFIELD" name="user" size="20" value="}, html_encode(param('user')), qq{"></td></tr>\n};
print qq{<tr><td><label for="PASSFIELD">Password:</label></td>\n};
print qq{<td><input type="password" id="PASSFIELD" name="pass" size="20"></td></tr>\n};
print qq{<tr><td colspan="2"><input type="submit" id="LOGIBUTT" name="LOGI" value="Login">};
print qq{<input type="hidden" name="redirect" value="}, html_encode(param('redirect')), qq{">} if defined(param('redirect'));
print qq{</td></tr>\n};
print qq{</tbody></table></form>\n};
if ($logifail) {
	print '<p style="color:red">Username or password incorrect</p>';
}
if ($cookiefail) {
	print '<p style="color:red">You need to enable cookies to login</p>';
}

print qq{<div class="navbot"><hr>Manx is no longer maintained</div>\n};

print "</div></body></html>\n";

$dbh->disconnect();
exit;

sub html_minimal_encode($) {
        my $str = shift;
        if (defined($str)) {
                $str =~ s/\015\012/<BR>/g;
        return $str;
        }
        return '';
}

sub sessionid() {
	return sprintf "%s.%04d", POSIX::strftime("%Y%m%d%H%M%S", gmtime()), int(rand(10000));
}

#: vim: ts=4 :
