#!/usr/bin/perl -w

use strict;

use CGI qw(:cgi -no_xhtml :debug);
use DBI;
use POSIX ();
use Manx::DB;

sub excelquote;
sub html_encode($);
sub html_encode_nbsp($);
sub html_header;

my ($dbh, $smt, $sth, $rc, $rv, @rowary);

my $SEARCHURL = '/manx/search';
my $DETAILSURL = '/manx/details';

my ($word, $norm_word, @search_words, @ignored_words);

$dbh = connectdb();
die $DBI::errstr if $DBI::err;

@rowary = $dbh->selectrow_array('select confval from CONFIG where confkey="updated"');
my ($year, $mon, $mday, $hour, $min, $sec) = $rowary[0] =~ /(....)(..)(..)(..)(..)(..)/;
my $time = POSIX::mktime($sec, $min, $hour, $mday, $mon - 1, $year - 1900);
my $tlm = POSIX::strftime("%a, %d %b %Y %T GMT", gmtime($time));

print header('-status' => 200, '-last-modified' => $tlm, '-cache-control' => 'max-age=600', '-expires' => '+1d', '-charset' => 'utf-8');

# Because we wish to count copies just once, we have to retrieve the entire set of results
# and filter, instead of using LIMIT. "company" is retrieved even though it is fixed at the
# moment, because I might want an "any company" feature later.

$smt = 'select pub_id, ph_part, ph_title, pub_has_online_copies, ph_abstract, ph_pubdate, ph_revision, ph_company' .
	' from PUB join PUBHISTORY on pub_history = ph_id' .
	' where ph_keywords like "%terminal%"' .
	' and ph_company=?' .
	' order by ph_sort_part,ph_pubdate,pub_id';
		
$sth = $dbh->prepare($smt);
warn $DBI::errstr if $DBI::err;
$rv = $sth->execute(param('cp'));
die $DBI::errstr if $DBI::err;

my $total_matches = 0;
my $last_pubid = 0;
my $match;


	print qq{<table class="manxtermlist"><thead><tr><th>Part</th><th>Date</th><th>Title</th></tr></thead>\n<tbody>\n};
	my ($start, $end, $num_per_page, $page_links, @flags);
		
while (my $r = $sth->fetchrow_hashref) {

	$r->{ph_part} ||= '';
	$r->{ph_title} ||= '';
	$r->{ph_pubdate} ||= '';
	$r->{ph_revision} ||= '';

	print '<tr class="', (++$match & 1 ? 'odd' : 'even'), qq{">\n<td>}, html_encode_nbsp(trim($r->{ph_part} . ' ' . $r->{ph_revision}));
	print qq{</td>\n<td>}, html_encode($r->{ph_pubdate}), qq{</td>\n};

	print '<td>';
	if ($r->{pub_has_online_copies}) {
		print '<a', qq{ href="$DETAILSURL/$r->{ph_company},$r->{pub_id}">}, html_encode($r->{ph_title}), qq{</a>};
	} else {
		print html_encode($r->{ph_title});
	}

	print "</td>\n</tr>\n";
}
$rc = $sth->finish;
warn $DBI::errstr if $DBI::err;

print "</tbody></table>\n";
	
$dbh->disconnect() if $dbh;
exit;

sub trim {
	my @out = @_;
	for (@out) {
		s/^\s+//;
		s/\s+$//;
	}
	return wantarray ? @out : $out[0];
}

sub html_encode($) {
	my $str = shift || '';
	if (defined($str)) {
		$str =~ s/&/&amp;/g;
		$str =~ s/>/&gt;/g;
		$str =~ s/</&lt;/g;
		$str =~ s/"/&quot;/g;
	}
	return $str;
}

sub html_blob_encode($) {
	my $str = shift || '';
	if (defined($str)) {
		$str =~ s/&/&amp;/g;
		$str =~ s/>/&gt;/g;
		$str =~ s/</&lt;/g;
		$str =~ s/"/&quot;/g;
		$str =~ s/\015\012/<BR>/g;
	}
	return $str;
}

# As html_encode(), except also make spaces into non-breaking spaces
sub html_encode_nbsp($) {
	my $str = shift || '';
	if (defined($str)) {
		$str =~ s/ /\240/g;
		$str =~ s/&/&amp;/g;
		$str =~ s/>/&gt;/g;
		$str =~ s/</&lt;/g;
		$str =~ s/"/&quot;/g;
		$str =~ s/\240/&nbsp;/g;
	}
	return $str;
}
